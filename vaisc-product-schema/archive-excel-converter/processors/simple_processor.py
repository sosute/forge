#!/usr/bin/env python3
"""
„Ç∑„É≥„Éó„É´„Å™API‰ªïÊßòÊõ∏Â§âÊèõ„ÉÑ„Éº„É´
Excel ‚Üí MarkDown ‚Üí ‰∫∫Èñì„ÅåË™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢Âºè
"""

import re
import sys


def extract_api_info(raw_content):
    """Áîü„Éá„Éº„Çø„Åã„ÇâÂÆüÈöõ„ÅÆAPIÊÉÖÂ†±„ÇíÊäΩÂá∫"""
    lines = raw_content.split('\n')
    
    api_fields = []
    
    for line in lines:
        if '|' in line and line.count('|') > 10:
            cells = [cell.strip() for cell in line.split('|')]
            
            # „Éá„Éº„ÇøË°å„ÇíÊ§úÂá∫ÔºàNo.„Å®JSON„ÅÆ‰∏°Êñπ„ÅåÂ≠òÂú®Ôºâ
            if (len(cells) > 50 and 
                cells[3] and cells[3].isdigit() and  # No.Âàó
                cells[4] and '"' in cells[4]):       # JSONÂàó
                
                # JSON„Åã„Çâ„Éï„Ç£„Éº„É´„ÉâÂêç„Å®ÂÄ§„ÇíÊäΩÂá∫
                json_text = cells[4]
                json_match = re.search(r'"([^"]+)":\s*(.+)', json_text)
                
                if json_match:
                    field_name = json_match.group(1)
                    field_value = json_match.group(2).rstrip(',')
                    
                    field_info = {
                        'no': cells[3],
                        'field_name': field_name,
                        'value_example': field_value,
                        'description': cells[49] if len(cells) > 49 else '',
                        'master_name': cells[74] if len(cells) > 74 else '',
                        'logical_name': cells[81] if len(cells) > 81 else '',
                        'physical_name': cells[88] if len(cells) > 88 else '',
                        'search_voi_usage': cells[101] if len(cells) > 101 else '',
                        'app_usage': cells[107] if len(cells) > 107 else '',
                        'vaics_after': cells[125] if len(cells) > 125 else ''
                    }
                    
                    api_fields.append(field_info)
    
    return api_fields


def generate_readable_output(api_fields):
    """‰∫∫Èñì„ÅåË™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢Âºè„ÅßÂá∫ÂäõÁîüÊàê"""
    
    output = []
    output.append("# VAISC „Çµ„Éº„ÉÅAPI „É¨„Çπ„Éù„É≥„Çπ‰ªïÊßòÊõ∏")
    output.append("")
    output.append("VAISC„ÅÆ„Çµ„Éº„ÉÅAPI„ÅåËøî„ÅôJSON„É¨„Çπ„Éù„É≥„Çπ„ÅÆË©≥Á¥∞‰ªïÊßò„Åß„Åô„ÄÇ")
    output.append("")
    
    # „Çµ„Éû„É™„Éº
    output.append("## üìä „Çµ„Éû„É™„Éº")
    output.append(f"- **Á∑è„Éï„Ç£„Éº„É´„ÉâÊï∞**: {len(api_fields)}ÂÄã")
    output.append(f"- **„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà**: `/api/search`")
    output.append("")
    
    # „Éï„Ç£„Éº„É´„Éâ‰∏ÄË¶ß
    output.append("## üìã „Éï„Ç£„Éº„É´„Éâ‰∏ÄË¶ß")
    output.append("")
    output.append("| No. | „Éï„Ç£„Éº„É´„ÉâÂêç | Âûã | Ë™¨Êòé |")
    output.append("|-----|-------------|-----|------|")
    
    for field in api_fields:
        # ÂÄ§„ÅÆ‰æã„Åã„ÇâÂûã„ÇíÊé®Ê∏¨
        value_type = "string"
        if field['value_example'].isdigit():
            value_type = "number"
        elif field['value_example'].lower() in ['true', 'false']:
            value_type = "boolean"
        elif field['value_example'].startswith('['):
            value_type = "array"
        elif field['value_example'].startswith('{'):
            value_type = "object"
            
        output.append(f"| {field['no']} | `{field['field_name']}` | {value_type} | {field['description']} |")
    
    output.append("")
    
    # Ë©≥Á¥∞‰ªïÊßò
    output.append("## üîç Ë©≥Á¥∞‰ªïÊßò")
    output.append("")
    
    for field in api_fields:
        output.append(f"### {field['field_name']}")
        output.append("")
        
        # Âü∫Êú¨ÊÉÖÂ†±
        output.append("**Âü∫Êú¨ÊÉÖÂ†±**")
        output.append(f"- **No.**: {field['no']}")
        output.append(f"- **„Éï„Ç£„Éº„É´„ÉâÂêç**: `{field['field_name']}`")
        output.append(f"- **ÂÄ§„ÅÆ‰æã**: `{field['value_example']}`")
        output.append(f"- **Ë™¨Êòé**: {field['description']}")
        output.append("")
        
        # „Éá„Éº„Çø„Éô„Éº„ÇπÊÉÖÂ†±
        if field['physical_name'] or field['logical_name']:
            output.append("**„Éá„Éº„Çø„Éô„Éº„ÇπÊÉÖÂ†±**")
            if field['physical_name']:
                output.append(f"- **Áâ©ÁêÜÂêç**: `{field['physical_name']}`")
            if field['logical_name']:
                output.append(f"- **Ë´ñÁêÜÂêç**: {field['logical_name']}")
            if field['master_name']:
                output.append(f"- **„Éû„Çπ„Çø**: {field['master_name']}")
            output.append("")
        
        # Âà©Áî®Áä∂Ê≥Å
        usage_info = []
        if field['search_voi_usage']:
            usage_info.append(f"**search-voi**: {field['search_voi_usage']}")
        if field['app_usage']:
            usage_info.append(f"**„Ç¢„Éó„É™**: {field['app_usage']}")
        if field['vaics_after']:
            usage_info.append(f"**VAICSÂ∞éÂÖ•Âæå**: {field['vaics_after']}")
        
        if usage_info:
            output.append("**Âà©Áî®Áä∂Ê≥Å**")
            for usage in usage_info:
                output.append(f"- {usage}")
            output.append("")
        
        # JSON‰æã
        output.append("**JSON‰æã**")
        output.append("```json")
        output.append(f'"{field["field_name"]}": {field["value_example"]}')
        output.append("```")
        output.append("")
        output.append("---")
        output.append("")
    
    return '\n'.join(output)


def main():
    if len(sys.argv) != 3:
        print("‰ΩøÁî®ÊñπÊ≥ï: python simple_processor.py input.md output.md")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            raw_content = f.read()
        
        print("üîç API„Éï„Ç£„Éº„É´„ÉâÊÉÖÂ†±„ÇíËß£Êûê‰∏≠...")
        api_fields = extract_api_info(raw_content)
        print(f"   ‚úÖ {len(api_fields)}ÂÄã„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÇíÊ§úÂá∫")
        
        print("üìù Ë™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢Âºè„ÅßÂá∫ÂäõÁîüÊàê‰∏≠...")
        readable_content = generate_readable_output(api_fields)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(readable_content)
        
        print(f"‚úÖ ÂÆå‰∫Ü: {output_file}")
        print("\nüìã Ê§úÂá∫„Åï„Çå„Åü„Éï„Ç£„Éº„É´„Éâ:")
        for field in api_fields[:5]:  # ÊúÄÂàù„ÅÆ5„Å§„ÇíË°®Á§∫
            print(f"   - {field['no']:2}: {field['field_name']} = {field['value_example']}")
        if len(api_fields) > 5:
            print(f"   ... ‰ªñ{len(api_fields)-5}ÂÄã")
        
    except Exception as e:
        print(f"‚ùå „Ç®„É©„Éº: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()